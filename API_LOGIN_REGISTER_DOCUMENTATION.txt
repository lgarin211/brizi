================================================================================
DOKUMENTASI API LOGIN DAN REGISTER - PLAZA FESTIVAL
================================================================================

BASE URL: https://service.plazafestival-gmsb.co.id/api

================================================================================
1. API REGISTER
================================================================================

ENDPOINT: POST /api/auth/register

DESCRIPTION:
Mendaftarkan user baru ke dalam sistem PlazaFest. User akan mendapatkan token
otentikasi setelah berhasil registrasi.

HEADERS:
Content-Type: application/json
Accept: application/json

REQUEST BODY:
{
    "name": "string (required) - Nama lengkap user",
    "email": "string (required) - Email unik user",
    "password": "string (required) - Password minimal 8 karakter",
    "password_confirmation": "string (required) - Konfirmasi password",
    "phone": "string (optional) - Nomor telepon",
    "address": "string (optional) - Alamat lengkap",
    "city": "string (optional) - Nama kota",
    "postal_code": "string (optional) - Kode pos"
}

CONTOH REQUEST:
curl -X POST https://service.plazafestival-gmsb.co.id/api/auth/register \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  -d '{
    "name": "John Doe",
    "email": "john.doe@example.com",
    "password": "password123",
    "password_confirmation": "password123",
    "phone": "08123456789",
    "address": "Jl. Sudirman No. 123",
    "city": "Jakarta",
    "postal_code": "12190"
  }'

SUCCESS RESPONSE (201 Created):
{
    "success": true,
    "message": "User registered successfully",
    "data": {
        "user": {
            "id": 1,
            "name": "John Doe",
            "email": "john.doe@example.com",
            "phone": "08123456789",
            "address": "Jl. Sudirman No. 123",
            "city": "Jakarta",
            "postal_code": "12190",
            "email_verified_at": null,
            "created_at": "2025-07-29T10:30:00.000000Z",
            "updated_at": "2025-07-29T10:30:00.000000Z"
        },
        "token": "1|abcdef123456789...",
        "token_type": "Bearer",
        "expires_at": "2025-08-28T10:30:00.000000Z"
    }
}

ERROR RESPONSES:

422 Unprocessable Entity (Validation Error):
{
    "success": false,
    "message": "Validation failed",
    "errors": {
        "email": ["The email has already been taken."],
        "password": ["The password must be at least 8 characters."]
    }
}

400 Bad Request:
{
    "success": false,
    "message": "Registration failed",
    "error": "Invalid data provided"
}

================================================================================
2. API LOGIN
================================================================================

ENDPOINT: POST /api/auth/login

DESCRIPTION:
Melakukan autentikasi user dan mendapatkan token akses untuk menggunakan
API yang memerlukan autentikasi.

HEADERS:
Content-Type: application/json
Accept: application/json

REQUEST BODY:
{
    "email": "string (required) - Email user yang terdaftar",
    "password": "string (required) - Password user",
    "remember_me": "boolean (optional) - Perpanjang masa aktif token"
}

CONTOH REQUEST:
curl -X POST https://service.plazafestival-gmsb.co.id/api/auth/login \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  -d '{
    "email": "john.doe@example.com",
    "password": "password123",
    "remember_me": true
  }'

SUCCESS RESPONSE (200 OK):
{
    "success": true,
    "message": "Login successful",
    "data": {
        "user": {
            "id": 1,
            "name": "John Doe",
            "email": "john.doe@example.com",
            "phone": "08123456789",
            "address": "Jl. Sudirman No. 123",
            "city": "Jakarta",
            "postal_code": "12190",
            "email_verified_at": "2025-07-29T11:00:00.000000Z",
            "created_at": "2025-07-29T10:30:00.000000Z",
            "updated_at": "2025-07-29T10:30:00.000000Z"
        },
        "token": "2|xyz789abc123def...",
        "token_type": "Bearer",
        "expires_at": "2025-08-28T11:00:00.000000Z"
    }
}

ERROR RESPONSES:

401 Unauthorized (Invalid Credentials):
{
    "success": false,
    "message": "Invalid credentials",
    "error": "Email or password is incorrect"
}

422 Unprocessable Entity (Validation Error):
{
    "success": false,
    "message": "Validation failed",
    "errors": {
        "email": ["The email field is required."],
        "password": ["The password field is required."]
    }
}

429 Too Many Requests (Rate Limiting):
{
    "success": false,
    "message": "Too many login attempts",
    "error": "Please try again in 60 seconds"
}

================================================================================
3. MENGGUNAKAN TOKEN UNTUK API YANG MEMERLUKAN AUTENTIKASI
================================================================================

Setelah mendapatkan token dari login/register, gunakan token tersebut untuk
mengakses API yang memerlukan autentikasi dengan cara menambahkan header:

Authorization: Bearer [token]

CONTOH PENGGUNAAN TOKEN:
curl -X GET https://service.plazafestival-gmsb.co.id/api/auth/profile \
  -H "Authorization: Bearer 2|xyz789abc123def..." \
  -H "Accept: application/json"

API YANG MEMERLUKAN AUTENTIKASI:
- GET /api/auth/profile - Mendapatkan profil user
- PUT /api/auth/profile - Update profil user
- POST /api/auth/logout - Logout dan hapus token
- POST /api/auth/change-password - Ganti password
- POST /api/auth/refresh-token - Refresh token baru

================================================================================
4. CONTOH IMPLEMENTASI JAVASCRIPT/FETCH
================================================================================

// Fungsi Register
async function register(userData) {
    try {
        const response = await fetch('https://service.plazafestival-gmsb.co.id/api/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(userData)
        });

        const data = await response.json();

        if (response.ok) {
            // Simpan token
            localStorage.setItem('auth_token', data.data.token);
            localStorage.setItem('user_data', JSON.stringify(data.data.user));
            return { success: true, data: data.data };
        } else {
            return { success: false, error: data.message, errors: data.errors };
        }
    } catch (error) {
        return { success: false, error: 'Network error' };
    }
}

// Fungsi Login
async function login(email, password, rememberMe = false) {
    try {
        const response = await fetch('https://service.plazafestival-gmsb.co.id/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                email: email,
                password: password,
                remember_me: rememberMe
            })
        });

        const data = await response.json();

        if (response.ok) {
            // Simpan token
            localStorage.setItem('auth_token', data.data.token);
            localStorage.setItem('user_data', JSON.stringify(data.data.user));
            return { success: true, data: data.data };
        } else {
            return { success: false, error: data.message, errors: data.errors };
        }
    } catch (error) {
        return { success: false, error: 'Network error' };
    }
}

// Fungsi untuk API yang memerlukan autentikasi
async function makeAuthenticatedRequest(url, options = {}) {
    const token = localStorage.getItem('auth_token');

    const defaultOptions = {
        headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`
        }
    };

    const mergedOptions = {
        ...defaultOptions,
        ...options,
        headers: {
            ...defaultOptions.headers,
            ...options.headers
        }
    };

    try {
        const response = await fetch(url, mergedOptions);

        if (response.status === 401) {
            // Token expired atau invalid
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user_data');
            // Redirect ke login atau tampilkan pesan
            return { success: false, error: 'Session expired' };
        }

        const data = await response.json();
        return { success: response.ok, data, status: response.status };
    } catch (error) {
        return { success: false, error: 'Network error' };
    }
}

================================================================================
5. CONTOH IMPLEMENTASI PHP/CURL
================================================================================

<?php

// Fungsi Register
function register($userData) {
    $curl = curl_init();

    curl_setopt_array($curl, [
        CURLOPT_URL => 'https://service.plazafestival-gmsb.co.id/api/auth/register',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => json_encode($userData),
        CURLOPT_HTTPHEADER => [
            'Content-Type: application/json',
            'Accept: application/json'
        ]
    ]);

    $response = curl_exec($curl);
    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);

    $data = json_decode($response, true);

    if ($httpCode === 201) {
        // Simpan token ke session atau database
        $_SESSION['auth_token'] = $data['data']['token'];
        $_SESSION['user_data'] = $data['data']['user'];
        return ['success' => true, 'data' => $data['data']];
    } else {
        return ['success' => false, 'error' => $data['message'], 'errors' => $data['errors'] ?? []];
    }
}

// Fungsi Login
function login($email, $password, $rememberMe = false) {
    $curl = curl_init();

    $postData = [
        'email' => $email,
        'password' => $password,
        'remember_me' => $rememberMe
    ];

    curl_setopt_array($curl, [
        CURLOPT_URL => 'https://service.plazafestival-gmsb.co.id/api/auth/login',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => json_encode($postData),
        CURLOPT_HTTPHEADER => [
            'Content-Type: application/json',
            'Accept: application/json'
        ]
    ]);

    $response = curl_exec($curl);
    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);

    $data = json_decode($response, true);

    if ($httpCode === 200) {
        // Simpan token ke session atau database
        $_SESSION['auth_token'] = $data['data']['token'];
        $_SESSION['user_data'] = $data['data']['user'];
        return ['success' => true, 'data' => $data['data']];
    } else {
        return ['success' => false, 'error' => $data['message'], 'errors' => $data['errors'] ?? []];
    }
}

// Fungsi untuk request dengan autentikasi
function makeAuthenticatedRequest($url, $method = 'GET', $data = null) {
    $token = $_SESSION['auth_token'] ?? null;

    if (!$token) {
        return ['success' => false, 'error' => 'No authentication token'];
    }

    $curl = curl_init();

    $headers = [
        'Accept: application/json',
        'Authorization: Bearer ' . $token
    ];

    $curlOptions = [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => $headers
    ];

    if ($method === 'POST') {
        $curlOptions[CURLOPT_POST] = true;
        if ($data) {
            $curlOptions[CURLOPT_POSTFIELDS] = json_encode($data);
            $headers[] = 'Content-Type: application/json';
        }
    } elseif ($method === 'PUT') {
        $curlOptions[CURLOPT_CUSTOMREQUEST] = 'PUT';
        if ($data) {
            $curlOptions[CURLOPT_POSTFIELDS] = json_encode($data);
            $headers[] = 'Content-Type: application/json';
        }
    }

    $curlOptions[CURLOPT_HTTPHEADER] = $headers;
    curl_setopt_array($curl, $curlOptions);

    $response = curl_exec($curl);
    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);

    if ($httpCode === 401) {
        // Token expired
        unset($_SESSION['auth_token']);
        unset($_SESSION['user_data']);
        return ['success' => false, 'error' => 'Session expired'];
    }

    $data = json_decode($response, true);
    return ['success' => ($httpCode >= 200 && $httpCode < 300), 'data' => $data, 'status' => $httpCode];
}

?>

================================================================================
6. VALIDASI DAN ERROR HANDLING
================================================================================

VALIDASI REGISTER:
- name: required, string, max:255
- email: required, email, unique:users
- password: required, string, min:8, confirmed
- phone: nullable, string, max:20
- address: nullable, string, max:500
- city: nullable, string, max:100
- postal_code: nullable, string, max:10

VALIDASI LOGIN:
- email: required, email
- password: required, string
- remember_me: nullable, boolean

COMMON ERROR CODES:
- 200: Success (Login)
- 201: Success (Register)
- 400: Bad Request
- 401: Unauthorized (Invalid credentials atau token expired)
- 422: Validation Error
- 429: Too Many Requests (Rate limiting)
- 500: Internal Server Error

================================================================================
7. KEAMANAN DAN BEST PRACTICES
================================================================================

1. SIMPAN TOKEN DENGAN AMAN:
   - Gunakan localStorage/sessionStorage untuk web
   - Gunakan secure storage untuk mobile apps
   - Jangan simpan di plain text

2. HANDLE TOKEN EXPIRATION:
   - Cek response 401 untuk token expired
   - Implementasi refresh token mechanism
   - Redirect ke login jika token invalid

3. RATE LIMITING:
   - Login dibatasi untuk mencegah brute force
   - Implementasi delay setelah failed attempts

4. HTTPS ONLY:
   - Semua request harus menggunakan HTTPS
   - Jangan kirim credentials melalui HTTP

5. VALIDATION:
   - Validasi input di client dan server side
   - Sanitize data sebelum disimpan

================================================================================
TERAKHIR DIUPDATE: 29 Juli 2025
VERSION: 1.0
================================================================================
